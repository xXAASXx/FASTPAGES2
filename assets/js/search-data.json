{
  
    
        "post0": {
            "title": "ASCII and Images",
            "content": "import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private final String greyDir = &quot;images/tmp/greyscale/&quot;; private final String redDir = &quot;images/tmp/red/&quot;; private final String blueDir = &quot;images/tmp/blue/&quot;; private final String greenDir = &quot;images/tmp/green/&quot;; private String inFile; private String resizedFile; private String redFile; private String greenFile; private String blueFile; private String greyscaleFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.greyscaleFile = this.greyDir + name + &quot;_grey&quot; + &quot;.&quot; + ext; this.redFile = this.redDir + name + &quot;_red&quot; + &quot;.&quot; + ext; this.blueFile = this.blueDir + name + &quot;_blue&quot; + &quot;.&quot; + ext; this.greenFile = this.greenDir + name + &quot;_green&quot; + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } public void greyscale() { BufferedImage img = null; BufferedImage greyImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data greyImg = img; // create a new BufferedImage for drawing for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color co = new Color(img.getRGB(j, i)); int red = (int) (co.getRed() * 0.299); int green = (int) (co.getGreen() * 0.587); int blue = (int) (co.getBlue() * 0.114); int total = red + green + blue; Color newColor = new Color( total, total, total ); greyImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(greyImg), this.ext, new File(greyscaleFile)); } catch (IOException e) { return; } this.inFile = this.greyscaleFile; // use scaled file vs original file in Class this.setStats(); } public void redscale() { BufferedImage img = null; BufferedImage redImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data redImg = img; // create a new BufferedImage for drawing for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color co = new Color(img.getRGB(j, i)); int red = (int) co.getRed(); int green = 0; int blue = 0; Color newColor = new Color( red, green, blue); redImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(redImg), this.ext, new File(redFile)); } catch (IOException e) { return; } this.inFile = this.redFile; // use scaled file vs original file in Class this.setStats(); } public void greenscale() { BufferedImage img = null; BufferedImage greenImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data greenImg = img; // create a new BufferedImage for drawing for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color co = new Color(img.getRGB(j, i)); int red = 0; int green = (int) co.getGreen(); int blue = 0; Color newColor = new Color( red, green, blue); greenImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(greenImg), this.ext, new File(greenFile)); } catch (IOException e) { return; } this.inFile = this.greenFile; // use scaled file vs original file in Class this.setStats(); } public void bluescale() { BufferedImage img = null; BufferedImage blueImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data blueImg = img; // create a new BufferedImage for drawing for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color co = new Color(img.getRGB(j, i)); int red = (int) (co.getRed() * 0.299); int green = (int) (co.getGreen() * 0.587); int blue = (int) (co.getBlue() * 0.114); int total = red + green + blue; Color newColor = new Color(0, 0, total); blueImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(blueImg), this.ext, new File(blueFile)); } catch (IOException e) { return; } this.inFile = this.blueFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { if (i % 2 != 0) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics ronaldo = new Pics(&quot;ronaldo&quot;, &quot;jpeg&quot;); ronaldo.greyscale(); ronaldo.redscale(); ronaldo.greenscale(); ronaldo.bluescale(); ronaldo.printStats(&quot;Original&quot;); ronaldo.resize(33); ronaldo.printStats(&quot;Scaled&quot;); ronaldo.convertToAscii(); } } Pics.main(null); . Original: 84791 1024x1024 images/tmp/greyscale/ronaldo_grey.jpeg Scaled: 84791 1024x1024 images/tmp/greyscale/ronaldo_grey.jpeg . java.lang.NullPointerException: Cannot invoke &#34;java.awt.image.BufferedImage.getHeight()&#34; because &#34;&lt;local1&gt;&#34; is null at Pics.convertToAscii(#32:1) at Pics.main(#32:1) at .(#64:1) .",
            "url": "https://xxaasxx.github.io/FASTPAGES2/2022/10/25/imageScaling.html",
            "relUrl": "/2022/10/25/imageScaling.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "public class HelloWorld { public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } HelloWorld.main(null); . Hello World! .",
            "url": "https://xxaasxx.github.io/FASTPAGES2/2022/10/25/Java-Notebook.html",
            "relUrl": "/2022/10/25/Java-Notebook.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Rapid API",
            "content": "import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://nfl-schedule.p.rapidapi.com/v1/schedules&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;b256ce775fmsh9e5a7319b6e6e38p1d5c1fjsnae19e21ba599&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;api-football-v1.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); . {&#34;message&#34;:&#34;You are not subscribed to this API.&#34;} . Web Service . import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; import java.util.Date; import java.util.HashMap; import org.json.simple.JSONObject; import org.json.simple.parser.JSONParser; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.*; @RestController // annotation to create a RESTful web services @RequestMapping(&quot;/api/covid&quot;) //prefix of API public class CovidApiController { private JSONObject body; //last run result private HttpStatus status; //last run status String last_run = null; //last run day of month // GET Covid 19 Stats @GetMapping(&quot;/daily&quot;) //added to end of prefix as endpoint public ResponseEntity&lt;JSONObject&gt; getCovid() { //calls API once a day, sets body and status properties String today = new Date().toString().substring(0,10); if (last_run == null || !today.equals(last_run)) { try { //APIs can fail (ie Internet or Service down) //RapidAPI header HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://nfl-schedule.p.rapidapi.com/v1/schedules&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;b256ce775fmsh9e5a7319b6e6e38p1d5c1fjsnae19e21ba599&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;api-football-v1.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); //RapidAPI request and response HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); //JSONParser extracts text body and parses to JSONObject this.body = (JSONObject) new JSONParser().parse(response.body()); this.status = HttpStatus.OK; //200 success this.last_run = today; } catch (Exception e) { //capture failure info HashMap&lt;String, String&gt; status = new HashMap&lt;&gt;(); status.put(&quot;status&quot;, &quot;RapidApi failure: &quot; + e); //Setup object for error this.body = (JSONObject) status; this.status = HttpStatus.INTERNAL_SERVER_ERROR; //500 error this.last_run = null; } } //return JSONObject in RESTful style return new ResponseEntity&lt;&gt;(body, status); } } . | import org.json.simple.JSONObject; package org.json.simple does not exist .",
            "url": "https://xxaasxx.github.io/FASTPAGES2/2022/10/25/Java-API.html",
            "relUrl": "/2022/10/25/Java-API.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Urban Dictionary API",
            "content": "Benefits of using an Urban Dictionary API! . There are numerous dictionary API services available on the web that enable users to look up word definitions. However, the Urban Dictionary API sets itself apart in two significant aspects. Support for slang words and colloquial phrases and a Community-driven user-contributed rating system. The community-driven approach of the Urban Dictionary influences both these aspects. Since the user community collectively contributes to the dictionary, more contemporary, slang, and colloquial phrases are continuously added to the dictionary database. Thus the dictionary is richer and more relevant to the current times. Moreover, the user-contributed rating system allows users to rate word definitions and usage examples using up-votes and down-votes. This further democratizes the relevance of word definitions. Thus an end-user is presented with a list of word definitions and their corresponding example usages in addition to their up-votes and down-votes. This empowers the end-user with a choice to select and use a particular word definition and example from the returned list of multiple definitions. . // package examples; // import org.json.JSONArray; // import urbanapi.Definition; // import urbanapi.UDParser; public class APITestDriver { public static void main (String[] args) { UDParser udparser = new UDParser(&quot;http://api.urbandictionary.com/v0/&quot;); String JSONData = udparser.getJSONData(&quot;chris+hansen&quot;); // String JSONData = udparser.getJSONData(6730949); // System.out.println(JSONData); Definition[] test = udparser.getDefinitionsWithJSONData(JSONData); for(int i = 0; i &lt; test.length; i++) { System.out.println(&quot;WORD&quot;); System.out.println(test[i].getWordName()); System.out.println(&quot;DEFINITION&quot;); System.out.println(test[i].getDefinition()); System.out.println(&quot;AUTHOR&quot;); System.out.println(test[i].getAuthor()); System.out.println(&quot;WRITTEN DATE&quot;); System.out.println(test[i].getWrittenDate()); System.out.println(&quot;REFERENCE ID&quot;); System.out.println(test[i].getRefID()); System.out.println(&quot;PERMALINK&quot;); System.out.println(test[i].getPermalink()); } JSONArray keywordTags = udparser.getTagsWithJSONData(JSONData); System.out.println(&quot;TAGS&quot;); for(int i = 0; i &lt; keywordTags.length(); i++) { System.out.println(keywordTags.get(i)); } } } . import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://mashape-community-urban-dictionary.p.rapidapi.com/define?term=wat&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;b256ce775fmsh9e5a7319b6e6e38p1d5c1fjsnae19e21ba599&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;mashape-community-urban-dictionary.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); . . Football Example API! . import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://nfl-schedule.p.rapidapi.com/v1/schedules&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;9fb1283360mshedc514375b603d6p156a26jsna7cd4ca5744a&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;nfl-schedule.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); . {&#34;message&#34;:&#34;NFL Scheduled games&#34;,&#34;data&#34;:[{&#34;date&#34;:&#34;2022-10-07T00:15Z&#34;,&#34;venue&#34;:&#34;Empower Field at Mile High&#34;,&#34;name&#34;:&#34;Indianapolis Colts at Denver Broncos&#34;,&#34;shortName&#34;:&#34;IND @ DEN&#34;,&#34;awayTeam&#34;:{&#34;name&#34;:&#34;Colts&#34;,&#34;score&#34;:&#34;0&#34;},&#34;homeTeam&#34;:{&#34;name&#34;:&#34;Broncos&#34;,&#34;score&#34;:&#34;0&#34;}},{&#34;date&#34;:&#34;2022-10-09T13:30Z&#34;,&#34;venue&#34;:&#34;Tottenham Hotspur Stadium&#34;,&#34;name&#34;:&#34;New York Giants at Green Bay Packers&#34;,&#34;shortName&#34;:&#34;NYG @ GB&#34;,&#34;awayTeam&#34;:{&#34;name&#34;:&#34;Giants&#34;,&#34;score&#34;:&#34;0&#34;},&#34;homeTeam&#34;:{&#34;name&#34;:&#34;Packers&#34;,&#34;score&#34;:&#34;0&#34;}},{&#34;date&#34;:&#34;2022-10-09T17:00Z&#34;,&#34;venue&#34;:&#34;Highmark Stadium&#34;,&#34;name&#34;:&#34;Pittsburgh Steelers at Buffalo Bills&#34;,&#34;shortName&#34;:&#34;PIT @ BUF&#34;,&#34;awayTeam&#34;:{&#34;name&#34;:&#34;Steelers&#34;,&#34;score&#34;:&#34;0&#34;},&#34;homeTeam&#34;:{&#34;name&#34;:&#34;Bills&#34;,&#34;score&#34;:&#34;0&#34;}},{&#34;date&#34;:&#34;2022-10-09T17:00Z&#34;,&#34;venue&#34;:&#34;FirstEnergy Stadium&#34;,&#34;name&#34;:&#34;Los Angeles Chargers at Cleveland Browns&#34;,&#34;shortName&#34;:&#34;LAC @ CLE&#34;,&#34;awayTeam&#34;:{&#34;name&#34;:&#34;Chargers&#34;,&#34;score&#34;:&#34;0&#34;},&#34;homeTeam&#34;:{&#34;name&#34;:&#34;Browns&#34;,&#34;score&#34;:&#34;0&#34;}},{&#34;date&#34;:&#34;2022-10-09T17:00Z&#34;,&#34;venue&#34;:&#34;U.S. Bank Stadium&#34;,&#34;name&#34;:&#34;Chicago Bears at Minnesota Vikings&#34;,&#34;shortName&#34;:&#34;CHI @ MIN&#34;,&#34;awayTeam&#34;:{&#34;name&#34;:&#34;Bears&#34;,&#34;score&#34;:&#34;0&#34;},&#34;homeTeam&#34;:{&#34;name&#34;:&#34;Vikings&#34;,&#34;score&#34;:&#34;0&#34;}},{&#34;date&#34;:&#34;2022-10-09T17:00Z&#34;,&#34;venue&#34;:&#34;Gillette Stadium&#34;,&#34;name&#34;:&#34;Detroit Lions at New England Patriots&#34;,&#34;shortName&#34;:&#34;DET @ NE&#34;,&#34;awayTeam&#34;:{&#34;name&#34;:&#34;Lions&#34;,&#34;score&#34;:&#34;0&#34;},&#34;homeTeam&#34;:{&#34;name&#34;:&#34;Patriots&#34;,&#34;score&#34;:&#34;0&#34;}},{&#34;date&#34;:&#34;2022-10-09T17:00Z&#34;,&#34;venue&#34;:&#34;Caesars Superdome&#34;,&#34;name&#34;:&#34;Seattle Seahawks at New Orleans Saints&#34;,&#34;shortName&#34;:&#34;SEA @ NO&#34;,&#34;awayTeam&#34;:{&#34;name&#34;:&#34;Seahawks&#34;,&#34;score&#34;:&#34;0&#34;},&#34;homeTeam&#34;:{&#34;name&#34;:&#34;Saints&#34;,&#34;score&#34;:&#34;0&#34;}},{&#34;date&#34;:&#34;2022-10-09T17:00Z&#34;,&#34;venue&#34;:&#34;MetLife Stadium&#34;,&#34;name&#34;:&#34;Miami Dolphins at New York Jets&#34;,&#34;shortName&#34;:&#34;MIA @ NYJ&#34;,&#34;awayTeam&#34;:{&#34;name&#34;:&#34;Dolphins&#34;,&#34;score&#34;:&#34;0&#34;},&#34;homeTeam&#34;:{&#34;name&#34;:&#34;Jets&#34;,&#34;score&#34;:&#34;0&#34;}},{&#34;date&#34;:&#34;2022-10-09T17:00Z&#34;,&#34;venue&#34;:&#34;Raymond James Stadium&#34;,&#34;name&#34;:&#34;Atlanta Falcons at Tampa Bay Buccaneers&#34;,&#34;shortName&#34;:&#34;ATL @ TB&#34;,&#34;awayTeam&#34;:{&#34;name&#34;:&#34;Falcons&#34;,&#34;score&#34;:&#34;0&#34;},&#34;homeTeam&#34;:{&#34;name&#34;:&#34;Buccaneers&#34;,&#34;score&#34;:&#34;0&#34;}},{&#34;date&#34;:&#34;2022-10-09T17:00Z&#34;,&#34;venue&#34;:&#34;FedExField&#34;,&#34;name&#34;:&#34;Tennessee Titans at Washington Commanders&#34;,&#34;shortName&#34;:&#34;TEN @ WSH&#34;,&#34;awayTeam&#34;:{&#34;name&#34;:&#34;Titans&#34;,&#34;score&#34;:&#34;0&#34;},&#34;homeTeam&#34;:{&#34;name&#34;:&#34;Commanders&#34;,&#34;score&#34;:&#34;0&#34;}},{&#34;date&#34;:&#34;2022-10-09T17:00Z&#34;,&#34;venue&#34;:&#34;TIAA Bank Field&#34;,&#34;name&#34;:&#34;Houston Texans at Jacksonville Jaguars&#34;,&#34;shortName&#34;:&#34;HOU @ JAX&#34;,&#34;awayTeam&#34;:{&#34;name&#34;:&#34;Texans&#34;,&#34;score&#34;:&#34;0&#34;},&#34;homeTeam&#34;:{&#34;name&#34;:&#34;Jaguars&#34;,&#34;score&#34;:&#34;0&#34;}},{&#34;date&#34;:&#34;2022-10-09T20:05Z&#34;,&#34;venue&#34;:&#34;Bank of America Stadium&#34;,&#34;name&#34;:&#34;San Francisco 49ers at Carolina Panthers&#34;,&#34;shortName&#34;:&#34;SF @ CAR&#34;,&#34;awayTeam&#34;:{&#34;name&#34;:&#34;49ers&#34;,&#34;score&#34;:&#34;0&#34;},&#34;homeTeam&#34;:{&#34;name&#34;:&#34;Panthers&#34;,&#34;score&#34;:&#34;0&#34;}},{&#34;date&#34;:&#34;2022-10-09T20:25Z&#34;,&#34;venue&#34;:&#34;SoFi Stadium&#34;,&#34;name&#34;:&#34;Dallas Cowboys at Los Angeles Rams&#34;,&#34;shortName&#34;:&#34;DAL @ LAR&#34;,&#34;awayTeam&#34;:{&#34;name&#34;:&#34;Cowboys&#34;,&#34;score&#34;:&#34;0&#34;},&#34;homeTeam&#34;:{&#34;name&#34;:&#34;Rams&#34;,&#34;score&#34;:&#34;0&#34;}},{&#34;date&#34;:&#34;2022-10-09T20:25Z&#34;,&#34;venue&#34;:&#34;State Farm Stadium&#34;,&#34;name&#34;:&#34;Philadelphia Eagles at Arizona Cardinals&#34;,&#34;shortName&#34;:&#34;PHI @ ARI&#34;,&#34;awayTeam&#34;:{&#34;name&#34;:&#34;Eagles&#34;,&#34;score&#34;:&#34;0&#34;},&#34;homeTeam&#34;:{&#34;name&#34;:&#34;Cardinals&#34;,&#34;score&#34;:&#34;0&#34;}},{&#34;date&#34;:&#34;2022-10-10T00:20Z&#34;,&#34;venue&#34;:&#34;M&amp;T Bank Stadium&#34;,&#34;name&#34;:&#34;Cincinnati Bengals at Baltimore Ravens&#34;,&#34;shortName&#34;:&#34;CIN @ BAL&#34;,&#34;awayTeam&#34;:{&#34;name&#34;:&#34;Bengals&#34;,&#34;score&#34;:&#34;0&#34;},&#34;homeTeam&#34;:{&#34;name&#34;:&#34;Ravens&#34;,&#34;score&#34;:&#34;0&#34;}},{&#34;date&#34;:&#34;2022-10-11T00:15Z&#34;,&#34;venue&#34;:&#34;GEHA Field at Arrowhead Stadium&#34;,&#34;name&#34;:&#34;Las Vegas Raiders at Kansas City Chiefs&#34;,&#34;shortName&#34;:&#34;LV @ KC&#34;,&#34;awayTeam&#34;:{&#34;name&#34;:&#34;Raiders&#34;,&#34;score&#34;:&#34;0&#34;},&#34;homeTeam&#34;:{&#34;name&#34;:&#34;Chiefs&#34;,&#34;score&#34;:&#34;0&#34;}}]} .",
            "url": "https://xxaasxx.github.io/FASTPAGES2/2022/10/25/API.html",
            "relUrl": "/2022/10/25/API.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Writing Class HW",
            "content": "2021 FRQ1a . public class WordMatch { /** The secret string. */ private String secret; /** Constructs a WordMatch object with the given secret string of lowercase letters. */ public WordMatch(String word) { /* implementation not shown */ } /** Returns a score for guess, as described in part (a). * Precondition: 0 &lt; guess.length() &lt;= secret.length() */ public int scoreGuess(String guess) { int result = 0; for (int i = 0; a &lt; secret.length(); i++) { if(secret.substring(i).indexOf(guess) == 0) { result++; } } return result * guess.length() * guess.length(); } // public int scoreGuess(String guess) // { /* to be implemented in part (a) */ } /** Returns the better of two guesses, as determined by scoreGuess and the rules for a * tie-breaker that are described in part (b). * Precondition: guess1 and guess2 contain all lowercase letters. * guess1 is not the same as guess2. */ public String findBetterGuess(String guess1, String guess2) { if(scoreGuess(guess1) &gt; scoreGuess(guess2)) { return guess1; } if(scoreGuess(guess2) &gt; scoreGuess(guess1)) { return guess2; } if(guess1.compareTo(guess2) &gt; 0 ) { return guess1; } return guess2; } } . 2021 FRQ 3a . public void addMembers (String[] names, int gradYear) { for (String n : names) { MemberInfo newM = new MemberInfo (n, gradYear, true); memberList.add(newM); } } .",
            "url": "https://xxaasxx.github.io/FASTPAGES2/2022/10/21/Class.html",
            "relUrl": "/2022/10/21/Class.html",
            "date": " • Oct 21, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Random Number Guesser Game",
            "content": "Write a program where a random number is generated. Then the user tries to guess the number. If they guess too high display something to let them know, and same for if they guess a number that is too low. The loop must iterate until the number is guessed correctly. . import java.util.Random; import java.util.Scanner; public class GFG { public static void main(String[] args) { // stores actual and guess number int answer, guess; // maximum value is 100 final int MAX = 100; // takes input using scanner Scanner in = new Scanner(System.in); // Random instance Random rand = new Random(); boolean correct = false; // correct answer answer = rand.nextInt(MAX) + 1; // loop until the guess is correct while (!correct) { System.out.println( &quot;Guess a number between 1 and 100: &quot;); // guess value guess = in.nextInt(); // if guess is greater than actual if (guess &gt; answer) { System.out.println(&quot;Too high, try again&quot;); } // if guess is less than actual else if (guess &lt; answer) { System.out.println(&quot;Too low, try again&quot;); } // guess is equal to actual value else { System.out.println( &quot;Yes, you guessed the number.&quot;); correct = true; } } System.exit(0); } } . Different Example (currently not working) . import java.util.Scanner Scanner sc = new Scanner(System.in); System.out.println(sc.nextInt()); Random n = newRandom(); int newNumber; int oldNumber = -1; //Will never be matching the random number. for(int i=0;i&lt;100;i++){ Scanner sc = new Scanner(System.in); System.out.println(sc.nextInt()); do{ newNumber = n.nextInt(100); } while (newNumber == oldNumber); System.out.println(newNumber); oldNumber = newNumber; } . 82 19 30 78 54 43 66 74 13 46 40 39 2 3 51 19 6 19 26 28 31 44 13 48 47 91 81 69 80 2 77 14 16 95 51 41 87 80 13 3 24 13 3 57 94 79 16 56 69 99 67 65 53 20 9 67 26 82 34 15 39 74 60 94 81 94 19 18 67 55 13 87 94 97 4 17 44 42 6 44 94 37 84 92 10 98 4 35 71 94 44 71 36 45 84 25 53 33 19 4 .",
            "url": "https://xxaasxx.github.io/FASTPAGES2/2022/10/20/iterationGame.html",
            "relUrl": "/2022/10/20/iterationGame.html",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "2009 FRQ 3b",
            "content": "public int getChargeStartTime(int chargeTime) { int cheapestStartHour = 0; for(int startHour = 1; startHour &lt; rateTable.length; startHour++) if(getChargingCost(startHour, chargeTime) &lt; getChargingCost(cheapestStartHour, chargeTime)) cheapestStartHour = startHour; return cheapestStartHour; } . 2017 FRQ 1b . public boolean isStrictlyIncreasing() { for (int i = 0; i &lt; digitList.size()-1; i++) { if (digitList.get(i).intValue() &gt;= digitList.get(i+1).intValue()) { return false; } } return true; } . 2019 FRQ 3b . public boolean isBalanced(ArrayList&lt;String&gt; delimiters) { int openDels = 0; int closeDels = 0; for (String del : delimiters) { if (del.equals(openDel)) { openDels++; } else { closeDels++; } if (closeDels &gt; openDels) { return false; } } return openDels == closeDels; } .",
            "url": "https://xxaasxx.github.io/FASTPAGES2/2022/10/18/FRQweek2lesson.html",
            "relUrl": "/2022/10/18/FRQweek2lesson.html",
            "date": " • Oct 18, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Game Challenge",
            "content": "public class Human { private String name; private int HP; private int DMG; private double luck; private String food; public String getName() { return name; } public int getHP() { return HP; } public int getDMG() { return DMG; } public String getFood() { return food; } public double getLuck() { return luck; } public boolean isAlive() { if (this.HP &gt; 0) { return true; } else { return false; } } public void setName(String newName) { this.name = newName; } public void setHP(int newHP) { this.HP = newHP; } public void takeDMG(int takenDamage) { this.HP -= takenDamage; } public void setDMG(int newDMG) { this.DMG = newDMG; } public void setFood(String newFood) { this.food = newFood; } public void setLuck(double newLuck) { this.luck = newLuck; } } import java.lang.Math; public class Eating { public static void eat(Human Human1) { System.out.println(Human1.getName() + &quot; has an HP of &quot; +Human1.getHP() ); System.out.println(Human1.getName()+ &quot; is eating &quot; + Human1.getFood()); for(int x=0; x&lt;5; x ++ ) { if (Math.random() &lt; Human1.getLuck()) { Human1.takeDMG(Human1.getDMG()); System.out.println(Human1.getName() + &quot; is hurt!!&quot;); System.out.println(Human1.getName() + &quot; takes &quot; + Human1.getDMG() + &quot; damage &quot;); } else { System.out.println(Human1.getName() + &quot; takes no damage&quot;); System.out.println(Human1.getName() + &quot; takes another bite &quot;); } System.out.println(Human1.getName() + &quot; HP: &quot; + Human1.getHP()); System.out.println(); if (!Human1.isAlive()) { System.out.println(Human1.getName() + &quot; has died &quot; ); } } if (Human1.isAlive()) { System.out.println(Human1.getName() + &quot; stays alive to save the day! &quot;); } } public static void main(String[] args) { Human Human1 = new Human(); Human1.setName(&quot;Batman&quot;); Human1.setHP(15); Human1.setDMG(1); Human1.setFood(&quot;orange&quot;); Human1.setLuck(0.9); eat(Human1); } } Eating.main(null); . Batman has an HP of 15 Batman is eating orange Batman is hurt!! Batman takes 1 damage Batman HP: 14 Batman is hurt!! Batman takes 1 damage Batman HP: 13 Batman is hurt!! Batman takes 1 damage Batman HP: 12 Batman is hurt!! Batman takes 1 damage Batman HP: 11 Batman is hurt!! Batman takes 1 damage Batman HP: 10 Batman survives! .",
            "url": "https://xxaasxx.github.io/FASTPAGES2/2022/10/16/game.html",
            "relUrl": "/2022/10/16/game.html",
            "date": " • Oct 16, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Fibonacci Hack",
            "content": "Mr. Mortensens Code! . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } Fibo.main(null); . Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . For Loop Fibonacci! . public class fiboFor extends Fibo { public fiboFor() { this(10); } public fiboFor(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } protected void init(){ this.name = &quot;For Loop&quot;; this.setData(0); this.setData(1); for(int i = 2; i &lt;= this.size; ++i){ this.setData(this.list.get(i-2)+this.list.get(i-1)); } } static public void main(String[] args) { fiboFor fib = new fiboFor(); fib.print(); } } fiboFor.main(null); . Init method = For Loop fibonacci Number 10 = 34 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181], 20=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765], 21=[0], 22=[0, 1], 23=[0, 1, 1], 24=[0, 1, 1, 2], 25=[0, 1, 1, 2, 3], 26=[0, 1, 1, 2, 3, 5], 27=[0, 1, 1, 2, 3, 5, 8], 28=[0, 1, 1, 2, 3, 5, 8, 13], 29=[0, 1, 1, 2, 3, 5, 8, 13, 21], 30=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 31=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] . import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; public class JavaExample extends Fibo { public static void main(String[] args) { int count = 10, num1 = 0, num2 = 1; System.out.print(&quot;Fibonacci Series of &quot;+count+&quot; numbers:&quot;); for (int i = 1; i &lt;= count; ++i) { System.out.print(num1+&quot; &quot;); /* On each iteration, we are assigning second number * to the first number and assigning the sum of last two * numbers to the second number */ int sumOfPrevTwo = num1 + num2; num1 = num2; num2 = sumOfPrevTwo; } } } JavaExample.main(null) . Fibonacci Series of 10 numbers:0 1 1 2 3 5 8 13 21 34 . Recursion Loop . public class fiboRecursion extends Fibo { public fiboRecursion() { this(10); } public fiboRecursion(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } protected void init(){ this.name = &quot;Recursion&quot;; for(int n = 0; n &lt; this.size; n++){ this.setData(this.calc(n)); } } public int calc(int n) { if (n &lt; 2) { return n; } return this.calc(n-2) + this.calc(n-1); } static public void main(String[] args) { fiboRecursion fib = new fiboRecursion(); fib.print(); } } fiboRecursion.main(null); . Init method = Recursion fibonacci Number 10 = 34 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181], 20=[0], 21=[0, 1], 22=[0, 1, 1], 23=[0, 1, 1, 2], 24=[0, 1, 1, 2, 3], 25=[0, 1, 1, 2, 3, 5], 26=[0, 1, 1, 2, 3, 5, 8], 27=[0, 1, 1, 2, 3, 5, 8, 13], 28=[0, 1, 1, 2, 3, 5, 8, 13, 21], 29=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] . public class FibonacciCalc extends Fibo{ public static int fibonacciRecursion(int n){ if(n == 0){ return 0; } if(n == 1 || n == 2){ return 1; } return fibonacciRecursion(n-2) + fibonacciRecursion(n-1); } public static void main(String args[]) { int maxNumber = 10; System.out.print(&quot;Fibonacci Series of &quot;+maxNumber+&quot; numbers: &quot;); for(int i = 0; i &lt; maxNumber; i++){ System.out.print(fibonacciRecursion(i) +&quot; &quot;); } } } FibonacciCalc.main(null) . Fibonacci Series of 10 numbers: 0 1 1 2 3 5 8 13 21 34 . While Loop . public class fiboWhile extends Fibo { public fiboWhile() { this(10); } public fiboWhile(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.init(); } protected void init(){ this.name = &quot;While Loop&quot;; this.setData(0); this.setData(1); int i = 2; while(i &lt;= this.size){ this.setData(this.list.get(i-2)+this.list.get(i-1)); i++; } } static public void main(String[] args) { fiboWhile fib = new fiboWhile(); fib.print(); } } fiboWhile.main(null); . Init method = While Loop fibonacci Number 10 = 34 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181], 20=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765], 21=[0], 22=[0, 1], 23=[0, 1, 1], 24=[0, 1, 1, 2], 25=[0, 1, 1, 2, 3], 26=[0, 1, 1, 2, 3, 5], 27=[0, 1, 1, 2, 3, 5, 8], 28=[0, 1, 1, 2, 3, 5, 8, 13], 29=[0, 1, 1, 2, 3, 5, 8, 13, 21], 30=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 31=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] . public class FibonacciWhileExample extends Fibo { public static void main(String[] args) { int maxNumber = 10, previousNumber = 0, nextNumber = 1; System.out.print(&quot;Fibonacci Series of &quot;+maxNumber+&quot; numbers:&quot;); int i=1; while(i &lt;= maxNumber) { System.out.print(previousNumber+&quot; &quot;); int sum = previousNumber + nextNumber; previousNumber = nextNumber; nextNumber = sum; i++; } } } FibonacciWhileExample.main(null) . Fibonacci Series of 10 numbers:0 1 1 2 3 5 8 13 21 34 .",
            "url": "https://xxaasxx.github.io/FASTPAGES2/2022/09/23/Fibonacci.html",
            "relUrl": "/2022/09/23/Fibonacci.html",
            "date": " • Sep 23, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Monkey Array",
            "content": "class MonkeyLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] monkeys; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public MonkeyLoop() { //Storing Data in 2D arrays monkeys = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Monkey 1 { &quot; Monkey 1&quot;, &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, //[0][0] eyes &quot; _⏄_/ &quot;, //[0][1] chin &quot; --0-- &quot;, //[0][2] body &quot; ⎛ ⎞ &quot; //[0][3] legs }, //Monkey 2 { &quot; Monkey 2&quot;, &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }, //Monkey 3 { &quot; Monkey 3&quot;, &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, //[2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; }, //Monkey 4 { &quot; Monkey 4&quot;, &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, //[3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }, //Monkey 5 { &quot; Monkey 5&quot;, &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }, }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java Loopy&quot;); // monkeys (non-primitive) defined in constructor knows its length int monkeyCount = monkeys.length; int rowCount = 0; for (int i = monkeyCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Monkeys // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; little monkeys jumping on the bed...&quot;); for (int col = 0; col &lt; monkeys[rowCount].length; col++) { for (int row = 0; row &lt; monkeyCount; row++) { //cycles through &quot;cells&quot; of 2d array // prints specific part of the monkey from the column System.out.print(monkeys[row][col] + &quot; &quot;); } //this new line gives separation between stanza of poem System.out.println(); } rowCount += 1; //countdown for poem, decrementing monkeyCount variable by 1 monkeyCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;No more monkeys jumping on the bed&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new MonkeyLoop().printPoem(); //a new monkey list and output in one step } } MonkeyLoop.main(null); . Monkey Jumpers Poem in Java Loopy 5 little monkeys jumping on the bed... Monkey 1 Monkey 2 Monkey 3 Monkey 4 Monkey 5 ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ 4 little monkeys jumping on the bed... Monkey 1 Monkey 2 Monkey 3 Monkey 4 ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ 3 little monkeys jumping on the bed... Monkey 1 Monkey 2 Monkey 3 ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --0-- ++1++ &lt;-2-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 2 little monkeys jumping on the bed... Monkey 1 Monkey 2 ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ --0-- ++1++ ⎛ ⎞ ⌋ ⌊ 1 little monkeys jumping on the bed... Monkey 1 ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ No more monkeys jumping on the bed 0000000000000000000000000000000000 THE END .",
            "url": "https://xxaasxx.github.io/FASTPAGES2/2022/09/19/Monkey-Array.html",
            "relUrl": "/2022/09/19/Monkey-Array.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Iteration with Soccer Players 2D Array",
            "content": "class playerLoop { // The area between class definition and the 1st method is where we keep data for object in Java String [][] players; /** * Constructor initializes a 2D array of s */ public playerLoop() { //Storing Data in 2D arrays players = new String[][]{ //Player 0 { &quot; o__&quot;, &quot;/| &quot;, &quot;/ &gt; o&quot; }, //player 1 { &quot; o__&quot;, &quot;/| &quot;, &quot;/ &gt; o&quot; }, //player 2 { &quot; o__&quot;, &quot;/| &quot;, &quot;/ &gt; o&quot; }, //player 3 { &quot; o__&quot;, &quot;/| &quot;, &quot;/ &gt; o&quot; }, //player 4 { &quot; o__&quot;, &quot;/| &quot;, &quot;/ &gt; o&quot; }, }; } /** * Loop and print s in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;The Great Story of the Players Who Shot A Soccer Ball&quot;); System.out.println(&quot;&quot;); // players (non-primitive) defined in constructor knows its length int playerCount = players.length; for (int i = playerCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of players // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; players shooting the ball...&quot;); //how many separate parts are there in a player player? int partCount = players[0].length; for (int row = 0; row &lt; partCount; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each player part by part, will eventually print entire column*/ for (int col = 0; col &lt; playerCount; col++) { // prints specific part of the player from the column System.out.print(players[col][row] + &quot; &quot;); //this is new line between separate parts } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing playerCount variable by 1 System.out.println(&quot;One missed and got benched&quot;); playerCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;No more players shooting in the field&quot;); System.out.println(&quot;&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new playerLoop().printPoem(); //a new player list and output in one step } } playerLoop.main(null); . The Great Story of the Players Who Shot A Soccer Ball 5 players shooting the ball... o__ o__ o__ o__ o__ /| /| /| /| /| / &gt; o / &gt; o / &gt; o / &gt; o / &gt; o One missed and got benched 4 players shooting the ball... o__ o__ o__ o__ /| /| /| /| / &gt; o / &gt; o / &gt; o / &gt; o One missed and got benched 3 players shooting the ball... o__ o__ o__ /| /| /| / &gt; o / &gt; o / &gt; o One missed and got benched 2 players shooting the ball... o__ o__ /| /| / &gt; o / &gt; o One missed and got benched 1 players shooting the ball... o__ /| / &gt; o One missed and got benched No more players shooting in the field THE END .",
            "url": "https://xxaasxx.github.io/FASTPAGES2/2022/09/19/Iteration.html",
            "relUrl": "/2022/09/19/Iteration.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "2021 FRQ 1 (Part a & b)",
            "content": "Problem 1: https://apcentral.collegeboard.org/media/pdf/ap21-frq-computer-science-a.pdf . Part a) Write the WordMatch method scoreGuess. To determine the score to be returned, scoreGuess finds the number of times that guess occurs as a substring of secret and then multiplies that number by the square of the length of guess. Occurrences of guess may overlap within secret. . Assume that the length of guess is less than or equal to the length of secret and that guess is not an empty string. . The following examples show declarations of a WordMatch object. The tables show the outcomes of some possible calls to the scoreGuess method. . WordMatch game = new WordMatch(&quot;mississippi&quot;); . Part b) Write the WordMatch method findBetterGuess, which returns the better guess of its two String parameters, guess1 and guess2. If the scoreGuess method returns different values for guess1 and guess2, then the guess with the higher score is returned. If the scoreGuess method returns the same value for guess1 and guess2, then the alphabetically greater guess is returned. . The following example shows a declaration of a WordMatch object and the outcomes of some possible calls to the scoreGuess and findBetterGuess methods. . WordMatch game = new WordMatch(&quot;concatenation&quot;); . public class WordMatch { /** The secret string. */ private String secret; /** Constructs a WordMatch object with the given secret string of lowercase letters. */ public WordMatch(String word) { /* implementation not shown */ } /** Returns a score for guess, as described in part (a). * Precondition: 0 &lt; guess.length() &lt;= secret.length() */ public int scoreGuess(String guess) { int result = 0; for (int i = 0; a &lt; secret.length(); i++) { if(secret.substring(i).indexOf(guess) == 0) { result++; } } return result * guess.length() * guess.length(); } // public int scoreGuess(String guess) // { /* to be implemented in part (a) */ } /** Returns the better of two guesses, as determined by scoreGuess and the rules for a * tie-breaker that are described in part (b). * Precondition: guess1 and guess2 contain all lowercase letters. * guess1 is not the same as guess2. */ public String findBetterGuess(String guess1, String guess2) { if(scoreGuess(guess1) &gt; scoreGuess(guess2)) { return guess1; } if(scoreGuess(guess2) &gt; scoreGuess(guess1)) { return guess2; } if(guess1.compareTo(guess2) &gt; 0 ) { return guess1; } return guess2; } } .",
            "url": "https://xxaasxx.github.io/FASTPAGES2/2022/09/19/FRQ-practice.html",
            "relUrl": "/2022/09/19/FRQ-practice.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Java Primitives Notebook",
            "content": "import java.util.Scanner; public class Primitives { public static void main(String[] args) { Scanner input; double fahrenheit = 0.0; double celsius = 0.0; boolean correctDouble; input = new Scanner(System.in); System.out.print(&quot;Enter a temperature in Fahrenheit: &quot;); try { fahrenheit = input.nextDouble(); System.out.println(fahrenheit); correctDouble = true; } catch (Exception e) { correctDouble = false; } input.close(); celsius = ((fahrenheit-32)*5)/9; System.out.println( fahrenheit + &quot; °F is = &quot; + celsius + &quot; °C&quot;); } } Primitives.main(null); . Enter a temperature in Fahrenheit: 0.0 °F is = -17.77777777777778 °C .",
            "url": "https://xxaasxx.github.io/FASTPAGES2/2022/09/11/Java-Primitives-Notebook.html",
            "relUrl": "/2022/09/11/Java-Primitives-Notebook.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Objects",
            "content": "// imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers import java.io.*; // library for input output classes import java.io.File; public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes public static final String ANSI_RESET = &quot; u001B[0m&quot;; public static final String ANSI_BLACK = &quot; u001B[30m&quot;; public static final String ANSI_RED = &quot; u001B[31m&quot;; public static final String ANSI_GREEN = &quot; u001B[32m&quot;; public static final String ANSI_YELLOW = &quot; u001B[33m&quot;; public static final String ANSI_BLUE = &quot; u001B[34m&quot;; public static final String ANSI_PURPLE = &quot; u001B[35m&quot;; public static final String ANSI_CYAN = &quot; u001B[36m&quot;; public static final String ANSI_WHITE = &quot; u001B[37m&quot;; // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Math&quot;); System.out.println(&quot;2 - Science&quot;); System.out.println(&quot;3 - English&quot;); System.out.println(&quot;4 - Armaan &gt; Mr. Mortenson in color&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) throws Exception { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Cya!&quot;); quit = true; break; case 1: System.out.println(&quot;Math Calculator: &quot;); // stores two numbers double num1, num2; // Take input from the user Scanner scanner = new Scanner(System.in); System.out.print(&quot;Enter the first number: &quot;); // take the inputs num1 = scanner.nextDouble(); System.out.println(num1); System.out.print(&quot;Enter the operator (+,-,*,/): &quot;); char operator = scanner.next().charAt(0); System.out.println(operator); System.out.print(&quot;Enter second number: &quot;); num2 = scanner.nextDouble(); System.out.println(num2); double output = 0; switch (operator) { // case to add two numbers case &#39;+&#39;: output = num1 + num2; break; // case to subtract two numbers case &#39;-&#39;: output = num1 - num2; break; // case to multiply two numbers case &#39;*&#39;: output = num1 * num2; break; // case to divide two numbers case &#39;/&#39;: output = num1 / num2; break; default: System.out.println(&quot;Invalid input&quot;); break; } System.out.println(&quot;The final result: &quot;); // print the final result System.out.println(num1 + &quot; &quot; + operator + &quot; &quot; + num2 + &quot; = &quot; + output); System.out.println(); System.out.println(ANSI_RED + &quot;Enter Another option from the menu: &quot; + ANSI_RESET); break; case 2: System.out.println(&quot;Science (F = m*a) Calculator&quot;); // force calcultor // initialize scanner input Scanner input; // initialize integers to be used for the input and to be displayed at the very end double force = 0.0; double mass = 0.0; double acceleration = 0.0; // initialize strings to be used for the input and to be displayed at the very end String finalString; // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter force(kg): &quot;); try { mass = input.nextDouble(); System.out.println(mass); } catch (Exception e) { // if not a number System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter acceleration(m/s²): &quot;); try { acceleration = input.nextDouble(); System.out.println(acceleration); } catch (Exception e) { // if not a number System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); // math operation for finding force = mass x acceleration force = mass * acceleration; // final formatted string with both variables finalString = &quot;force(N) = &quot; + force; System.out.println(finalString); System.out.println(); System.out.println(ANSI_YELLOW + &quot;Enter Another option from the menu: &quot; + ANSI_RESET); break; case 3: System.out.print(&quot;English Spell Checker...&quot;); Scanner write = new Scanner(System.in); System.out.println(&quot;Enter a sentence and the program will check if you made any spelling mistakes or if the word is not in the dictionary: &quot;); String sentence = write.nextLine(); System.out.println(sentence); String[] splitSentence = sentence.split(&quot; &quot;); for(int i = 0; i &lt; splitSentence.length; i++) { Scanner read = new Scanner(new File(&quot;dictionary.txt&quot;)); boolean found = false; while(read.hasNextLine()) { String compare = read.nextLine(); if(compare.equalsIgnoreCase(splitSentence[i])) { System.out.println(splitSentence[i] + &quot; : correct&quot;); found=true; break; } } if(!found) System.out.println(splitSentence[i] + &quot; : incorrect&quot;); } System.out.println(); System.out.println(ANSI_BLUE + &quot;Enter Another option from the menu: &quot; + ANSI_RESET); break; case 4: for (int i = 0; i &lt; 20; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot; Armaan &gt; Mr. Mortensen &quot;); } System.out.println(); System.out.println(); System.out.println(ANSI_WHITE + &quot;Enter Another option from the menu: &quot; + ANSI_RESET); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Math 2 - Science 3 - English 4 - Armaan &gt; Mr. Mortenson in color 0 - Quit - java.util.InputMismatchException: Not a number, try again. 1: Math Calculator: Enter the first number: 2.0 Enter the operator (+,-,*,/): + Enter second number: 4.0 The final result: 2.0 + 4.0 = 6.0 Enter Another option from the menu: java.util.InputMismatchException: Not a number, try again. java.util.InputMismatchException: Not a number, try again. java.util.InputMismatchException: Not a number, try again. 1: Math Calculator: Enter the first number: java.util.InputMismatchException: Not a number, try again. 19: Unexpected choice, try again. java.util.InputMismatchException: Not a number, try again. .",
            "url": "https://xxaasxx.github.io/FASTPAGES2/2022/09/11/Java-Objects-Notebook.html",
            "relUrl": "/2022/09/11/Java-Objects-Notebook.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Title",
            "content": "ls . 2020-02-20-test.ipynb 2020-09-11-&#34;If Statements&#34;.ipynb 2022-09-06-JavaNotebook.ipynb 2022-09-06-Python-Notebook.ipynb 2022-09-11-Bash-Notebook.ipynb 2022-09-11-Java-Objects-Notebook.ipynb 2022-09-11-Java-Primitives-Notebook.ipynb 2022-09-19-FRQ-practice.ipynb 2022-09-19-Iteration.ipynb Java Notebook.ipynb README.md ghtop_images my_icons . python --version . Python 3.9.12 . python2 --version . Python 2.7.18 . java --version . openjdk 17.0.4.1 2022-08-12 OpenJDK Runtime Environment Temurin-17.0.4.1+1 (build 17.0.4.1+1) OpenJDK 64-Bit Server VM Temurin-17.0.4.1+1 (build 17.0.4.1+1, mixed mode, sharing) . javac --version . javac 17.0.4.1 . conda --version . conda 4.14.0 . conda list | grep &quot;jupyter&quot; . jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . jupyter kernelspec list . Available kernels: python396jvsc74a57bd0aee8b7b246df8f9039afb4144a1f6fd8d2ca17a180786b69acc140d282b71a49 /Users/armaanshamsaasef/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python396jvsc74a57bd0aee8b7b246df8f9039afb4144a1f6fd8d2ca17a180786b69acc140d282b71a49 bash /Users/armaanshamsaasef/Library/Jupyter/kernels/bash java /Users/armaanshamsaasef/Library/Jupyter/kernels/java javascript /Users/armaanshamsaasef/Library/Jupyter/kernels/javascript python3 /Users/armaanshamsaasef/opt/anaconda3/share/jupyter/kernels/python3 . npm -version . 6.4.1 .",
            "url": "https://xxaasxx.github.io/FASTPAGES2/2022/09/11/Bash-Notebook.html",
            "relUrl": "/2022/09/11/Bash-Notebook.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Python Notebook",
            "content": "print(&quot;Hello World&quot;) . Hello World .",
            "url": "https://xxaasxx.github.io/FASTPAGES2/2022/09/06/Python-Notebook.html",
            "relUrl": "/2022/09/06/Python-Notebook.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Java Notebook",
            "content": "public class HelloWorld { public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } HelloWorld.main(null); . Hello World! .",
            "url": "https://xxaasxx.github.io/FASTPAGES2/2022/09/06/JavaNotebook.html",
            "relUrl": "/2022/09/06/JavaNotebook.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "IF-Statements!",
            "content": "If statement; if statements are used to specify a block of code to be executed if a condition is true. . If-else: . Uses keyword “if” | Checks if statement is true | If it is, performs certain task | if not, performs else command | if-else-else Use the else if statement to specify a new condition if the first condition is false. | . Conditionals: allows the computer to make decisions based on if a statement is true or false . If-Else- Else If Booleans . if (5 &gt; 4) { //the program decides whether this is true or not System.out.println(&quot;5 is greater than 4&quot;); //if it is then this line is printed } . 5 is greater than 4 . What is an if/else statement? The if/else statement executes a block of code if a specified condition is true. If the condition is false, another block of code can be executed. . int time = 12; //set variable if (time &lt; 12) { //the program decides whether this is true or not System.out.println(&quot;Good evening.&quot;); //if it is then print this line }else { System.out.println(&quot;I hope you have an amazing day.&quot;); //if it is not then print this } . I hope you have an amazing day. . What is an If-else-else Statement? . int time = 12; if (time &lt; 12) { //the program decides whether this is true or not System.out.println(&quot;Good morning.&quot;); //if it is then print this line } else if (time &lt; 20) { //if it is not true, then check if this is true System.out.println(&quot;Good afternoon.&quot;); //if it is then print this line } else { System.out.println(&quot;Good night.&quot;); //or else print this line } . Good afternoon. . if (1 &gt; 2) { System.out.println(&quot;5 is greater than 4&quot;); } else if(3 &lt; 1.5) { System.out.println(&quot;5 is less than 4&quot;); } else if (7 &gt; 8) { System.out.println(&quot;8 is greater than 7&quot;); } else if (6 &lt; 8) { System.out.println(&quot;7 is less than 8&quot;); } else { System.out.println(&quot;Invalid&quot;); } . 7 is less than 8 . What is a Switch Case Program in Java? Java switch statement executes one statement from multiple conditions. . The switch statement evaluates an expression, matching the expression&#39;s value against a series of case clauses, and executes statements after the first case clause with a matching value, until a break statement is encountered. The default clause of a switch statement will be jumped to if no case matches the expression&#39;s value. | . System.out.print(&quot;Enter first number- &quot;); String something = input.nextLine(); // Read user input System.out.println(something); Scanner sc= new Scanner(System.in); int x= sc.nextInt(); String output; switch (x) { case 1: output = x + &quot; &gt; 0&quot;; break; case 2: output = x + &quot; &gt; 8&quot;; break; case 3: output = x + &quot; &gt; 3&quot;; break; case 4: output = x + &quot; &gt; 6&quot;; break; } System.out.println(output) . Enter first number- . | String something = input.nextLine(); cannot find symbol symbol: variable input . De Morgan&#39;s Law The complement of the union of two sets is the intersection of their complements and the complement of the intersection of two sets is the union of their complements. . || = &quot;or&quot; and the &amp;&amp; means &quot;and&quot; ! = not | . boolean playBasketball = false; boolean playBaseball = true; if (!(playBaseball &amp;&amp; playBasketball)){ System.out.println(&quot;I play baseball but not basketball&quot;); } else{ System.out.println(&quot;I play basketball but not baseball&quot;); } I play baseball but not basketball boolean playBasketball = false; boolean playBaseball = true; if (!playBaseball||!playBasketball){ System.out.println(&quot;I play basketball but not baseball&quot;); } else{ System.out.println(&quot;I play baseball but not basketball&quot;); } . I play baseball but not basketball . | I play baseball but not basketball &#39;;&#39; expected .",
            "url": "https://xxaasxx.github.io/FASTPAGES2/2020/09/11/If-Statements.html",
            "relUrl": "/2020/09/11/If-Statements.html",
            "date": " • Sep 11, 2020"
        }
        
    
  
    
        ,"post18": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://xxaasxx.github.io/FASTPAGES2/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  

  
      ,"page2": {
          "title": "About Me",
          "content": "Hello World! My name is Armaan Shamsaasef and I am a senior at Del Norte High School. I want to learn to code and make amazing websites to be able to help eventually start my own commpany and create an on going wealth. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://xxaasxx.github.io/FASTPAGES2/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://xxaasxx.github.io/FASTPAGES2/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}